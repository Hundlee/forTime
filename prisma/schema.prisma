// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  projects      Project[]
  tasks         Task[]
  CreateTask    CreateTask[]
  accounts      Account[]
  sessions      Session[]
}

model Project {
  id          String       @id @default(uuid())
  name        String
  description String
  tasks       Task[]
  CreateTasks CreateTask[]
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
}

model Task {
  id           String       @id @default(uuid())
  name         String
  description  String
  projectId    String
  project      Project      @relation(fields: [projectId], references: [id])
  date         DateTime
  createdTasks CreateTask[]
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?
}

model CreateTask {
  id          String    @id @default(uuid())
  name        String
  description String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  taskId      String
  task        Task      @relation(fields: [taskId], references: [id])
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  date        DateTime
  startTime   DateTime?
  endTime     DateTime?
}

model Category {
  id         String       @id @default(uuid())
  name       String       @unique
  CreateTask CreateTask[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
